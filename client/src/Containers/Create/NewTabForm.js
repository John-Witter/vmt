import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { TextInput, RadioBtn, Button } from '../../Components';
// import RoomOpts from './NewResource/RoomOpts';
import classes from './newTabForm.css';
import API from '../../utils/apiRequests';

const constants = {
  // See tabType field in server/models/Tab.js
  GEOGEBRA: 'geogebra',
  DESMOS: 'desmos',
  DESMOS_ACTIVITY: 'desmosActivity',
  PYRET: 'pyret',
  CLONE: 'clone',
};

const initialState = {
  name: '',
  instructions: '',
  ggbFile: '',
  desmosLink: '',
  tabType: constants.GEOGEBRA, // changed to include more room types used to be: `ggb: true`
  appName: 'classic',
  checkedNum: 0,
};

class NewTabForm extends Component {
  state = { ...initialState };

  changeHandler = (event) => {
    this.setState({
      [event.target.name]: event.target.value,
      errorMessage: null,
    });
  };

  onKeyDown = (event) => {
    if (event.key === 'Enter') {
      event.preventDefault();
      event.stopPropagation();
      this.submit();
    }
  };
  // @TODO move this somewhere it can be shared with Containsers/Workspace/NewTabForm
  // maybe it makes sense to move newTabForm Here because its creating something
  uploadGgbFiles = () => {
    const { ggbFile } = this.state;
    if (typeof ggbFile !== 'object' || ggbFile.length < 1) {
      return Promise.resolve({
        data: {
          result: [],
        },
      });
    }
    const formData = new window.FormData();

    // eslint-disable-next-line no-restricted-syntax
    for (const f of ggbFile) {
      formData.append('ggbFiles', f);
    }
    return API.uploadGgbFiles(formData);
  };

  submit = () => {
    const {
      room,
      user,
      activity,
      sendEvent,
      closeModal,
      updatedActivity,
      setTabs,
      currentTabs,
      currentTab,
    } = this.props;
    const { name, instructions, tabType, desmosLink, appName } = this.state;
    if (name.trim().length < 1) {
      this.setState({
        errorMessage: 'Please provide a name for the tab',
      });
      return;
    }
    API.getById('tabs', currentTab._id).then((response) => {
      const dbTab = response.data.result;
      const newTab = {
        name,
        desmosLink,
        appName,
        instructions,
        tabType: tabType === constants.CLONE ? currentTab.tabType : tabType,
        room: room ? room._id : null,
        activity: activity ? activity._id : null,
        currentState: tabType === constants.CLONE ? dbTab.currentState : '',
        currentStateBase64:
          tabType === constants.CLONE ? dbTab.currentStateBase64 : '',
        startingPoint: tabType === constants.CLONE ? dbTab.startingPoint : '',
        startingPointBase64:
          tabType === constants.CLONE ? dbTab.startingPointBase64 : '',
        currentScreen: tabType === constants.CLONE ? dbTab.currentScreen : 0,
      };
      this.uploadGgbFiles()
        .then((results) => {
          if (results && results.data) {
            // THIS MAY BE MEHAFUCKED UO NOW
            const [ggbFile] = results.data.result;
            newTab.ggbFile = ggbFile;
          }
          return API.post('tabs', newTab);
        })
        .then((res) => {
          let tabs;
          if (room) {
            tabs = [...currentTabs];
            tabs.push(res.data.result);
            setTabs(tabs);
            newTab.creator = {
              username: user.username,
              _id: user._id,
            };
            newTab.message = {
              text: `${newTab.creator.username} created a new tab`,
              room: room._id,
              autogenerated: true,
              messageType: 'NEW_TAB',
              timestamp: new Date().getTime(),
            };
            newTab._id = res.data.result._id;
            if (sendEvent) {
              sendEvent(newTab);
            }
          } else {
            tabs = [...activity.tabs];
            tabs.push(res.data.result);
            // UPDATE REDUX ACTIVITY
            updatedActivity(activity._id, { tabs });
          }
          this.setState(initialState);
          closeModal();
        })
        .catch(() => {
          this.setState({
            errorMessage:
              'Sorry, an error occured. Please try reloading the page.',
          });
        });
    });
  };

  setGgbFile = (event) => {
    this.setState({
      ggbFile: event.target.files,
    });
  };

  render() {
    const { name, errorMessage, instructions, checkedNum } = this.state;
    return (
      <div className={classes.NewTabModal}>
        <h2>Create A New Tab</h2>
        <TextInput
          light
          value={name}
          change={this.changeHandler}
          onKeyDown={this.onKeyDown}
          name="name"
          label="Name"
          autofill="none"
        />
        {errorMessage ? (
          <div className={classes.ErrorMessage}>{errorMessage}</div>
        ) : null}
        <TextInput
          light
          value={instructions}
          change={this.changeHandler}
          onKeyDown={this.onKeyDown}
          name="instructions"
          label="Instructions"
        />
        <div className={classes.RadioGroup}>
          {/* !!!DELETE MEOW!!! checkedNum is used to dynamically set the checked attribute to the selected radio button  */}
          <RadioBtn
            name={constants.GEOGEBRA}
            checked={checkedNum === 0}
            check={() =>
              this.setState({ tabType: constants.GEOGEBRA, checkedNum: 0 })
            }
          >
            GeoGebra
          </RadioBtn>
          <RadioBtn
            name={constants.DESMOS}
            checked={checkedNum === 1}
            check={() =>
              this.setState({ tabType: constants.DESMOS, checkedNum: 1 })
            }
          >
            Desmos
          </RadioBtn>
          <RadioBtn
            name={constants.CLONE}
            checked={checkedNum === 2}
            check={() =>
              this.setState({ tabType: constants.CLONE, checkedNum: 2 })
            }
          >
            Clone Current Tab
          </RadioBtn>
        </div>
        <Button m={10} click={this.submit} data-testid="create-tab">
          Create
        </Button>
      </div>
    );
  }
}

NewTabForm.propTypes = {
  room: PropTypes.shape({}),
  user: PropTypes.shape({}).isRequired,
  activity: PropTypes.shape({}),
  updatedActivity: PropTypes.func,
  sendEvent: PropTypes.func,
  closeModal: PropTypes.func.isRequired,
  setTabs: PropTypes.func, // not used for activities
  currentTabs: PropTypes.arrayOf(PropTypes.shape({})), // not used for activities
  currentTab: PropTypes.shape({}),
};

NewTabForm.defaultProps = {
  room: null,
  updatedActivity: null,
  sendEvent: null,
  activity: null,
  setTabs: null,
  currentTabs: null,
  currentTab: null,
};
export default NewTabForm;
